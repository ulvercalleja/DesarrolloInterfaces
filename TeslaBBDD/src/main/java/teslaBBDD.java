import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author at10DAM2
 */
public class teslaBBDD extends javax.swing.JFrame {
public final static String HOLA = "";
    /**
     * Creates new form teslaBBDD
     */
    public teslaBBDD() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        importarJSONButton = new javax.swing.JButton();
        btCreate = new javax.swing.JButton();
        btRead = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btClean = new javax.swing.JButton();
        tfID = new javax.swing.JTextField();
        tfModelo = new javax.swing.JTextField();
        tfAutonomia = new javax.swing.JTextField();
        tfPotencia = new javax.swing.JTextField();
        tfPrecio = new javax.swing.JTextField();
        jlID = new javax.swing.JLabel();
        jlModelo = new javax.swing.JLabel();
        jlPotencia = new javax.swing.JLabel();
        jlAutonomia = new javax.swing.JLabel();
        jlPrecio = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaBBDD = new javax.swing.JTable();
        exportarCSVButton = new javax.swing.JButton();
        importarCSVButton = new javax.swing.JButton();
        exportarJSONButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        importarJSONButton.setText("Importar JSON");
        importarJSONButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importarJSONButtonMouseClicked(evt);
            }
        });
        importarJSONButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarJSONButtonActionPerformed(evt);
            }
        });

        btCreate.setText("Create");
        btCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btCreateMouseClicked(evt);
            }
        });
        btCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCreateActionPerformed(evt);
            }
        });

        btRead.setText("Read");
        btRead.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btReadMouseClicked(evt);
            }
        });

        btUpdate.setText("Update");
        btUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btUpdateMouseClicked(evt);
            }
        });
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btDelete.setText("Delete");
        btDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btDeleteMouseClicked(evt);
            }
        });

        btClean.setText("Clean");
        btClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCleanActionPerformed(evt);
            }
        });

        tfID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfIDActionPerformed(evt);
            }
        });

        tfPotencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPotenciaActionPerformed(evt);
            }
        });

        jlID.setText("ID");

        jlModelo.setText("Modelo");

        jlPotencia.setText("Potencia");

        jlAutonomia.setText("Autonomia");

        jlPrecio.setText("Precio");

        tablaBBDD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Modelo", "Potencia", "Autonomia", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaBBDD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaBBDDMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaBBDD);

        exportarCSVButton.setText("Exportar CSV");
        exportarCSVButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportarCSVButtonMouseClicked(evt);
            }
        });

        importarCSVButton.setText("Importar CSV");
        importarCSVButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importarCSVButtonMouseClicked(evt);
            }
        });
        importarCSVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarCSVButtonActionPerformed(evt);
            }
        });

        exportarJSONButton.setText("Exportar JSON");
        exportarJSONButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportarJSONButtonMouseClicked(evt);
            }
        });
        exportarJSONButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarJSONButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlID)
                            .addComponent(jlModelo)
                            .addComponent(jlPotencia)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jlAutonomia, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jlPrecio)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfAutonomia, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btClean, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btRead, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(importarJSONButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(importarCSVButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(exportarJSONButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(exportarCSVButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(322, 322, 322))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btRead, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jlModelo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPotencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlPotencia))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfAutonomia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlAutonomia))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btClean)
                            .addComponent(tfPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlPrecio)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exportarCSVButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(importarCSVButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(importarJSONButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exportarJSONButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importarJSONButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importarJSONButtonMouseClicked
       
    }//GEN-LAST:event_importarJSONButtonMouseClicked

    private void importarJSONButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarJSONButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_importarJSONButtonActionPerformed

    private void btCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCreateActionPerformed
       
    }//GEN-LAST:event_btCreateActionPerformed

    private void btCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCleanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btCleanActionPerformed

    private void tfPotenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPotenciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPotenciaActionPerformed

    private void btCreateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btCreateMouseClicked
        // TODO add your handling code here:
        try {
            String url="jdbc:mysql://localhost:3306/tesla";
            try (Connection con = (Connection)DriverManager.getConnection(url, "root", "")) {
            
            String sql = "INSERT INTO coches(modelo,potencia,autonomia,precio) VALUES (?,?,?,?)";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, tfModelo.getText());
            ps.setInt(2, Integer.parseInt(tfPotencia.getText()));
            ps.setInt(3, Integer.parseInt(tfAutonomia.getText()));
            ps.setInt(4, Integer.parseInt(tfPrecio.getText()));
            
            int filas = ps.executeUpdate();
                System.out.println("Filas afectadas " + filas);
                
            con.close();
            }
          
        } catch (Exception e){
            System.out.print("No fufa. " + e.getMessage());
        }
    }//GEN-LAST:event_btCreateMouseClicked

    private void btReadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btReadMouseClicked
        DefaultTableModel modeloDatos = (DefaultTableModel)tablaBBDD.getModel();
        modeloDatos.setRowCount(0);
        try {
            String url="jdbc:mysql://localhost:3306/tesla";
            Connection con = (Connection)DriverManager.getConnection(url, "root", "");
            
            PreparedStatement pst = null;
            ResultSet rs;
            pst=con.prepareStatement("select * from coches");
            
            rs=pst.executeQuery("select * from coches");
            
            while(rs.next()){
                String id = rs.getString("id");
                String modelo = rs.getString("modelo");
                String potencia = rs.getString("potencia");
                String autonomia = rs.getString("autonomia");
                String precio = rs.getString("precio");
                modeloDatos.addRow(new Object[]{id,modelo,potencia,autonomia,precio});
            }
        } catch (Exception e){
            Logger.getLogger(teslaBBDD.class.getName()).log(Level.SEVERE,null,e);
        }
    }//GEN-LAST:event_btReadMouseClicked

    private void tfIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfIDActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btUpdateActionPerformed

    private void btUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btUpdateMouseClicked
        DefaultTableModel modeloDatos = (DefaultTableModel) tablaBBDD.getModel();

        if (tablaBBDD.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay registros disponibles.", "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                String url = "jdbc:mysql://localhost:3306/tesla";
                Connection con = DriverManager.getConnection(url, "root" , "");
                
                String sql = "UPDATE coches SET modelo = ?, potencia = ?, autonomia = ?, precio = ?";
                
                int filaSeleccionada = tablaBBDD.getSelectedRow();
                
                String modelo = tfModelo.getText();
                int potencia = Integer.parseInt(tfPotencia.getText());
                int autonomia = Integer.parseInt(tfAutonomia.getText());
                int precio = Integer.parseInt(tfPrecio.getText());
                
                PreparedStatement statement = con.prepareStatement(sql);
                statement.setString(1, modelo);
                statement.setInt(2, potencia);
                statement.setInt(3, autonomia);
                statement.setInt(4, precio);
                
                int filasAfectadas = statement.executeUpdate();
                
                if (filasAfectadas > 0){
                    tablaBBDD.setValueAt(modelo, filaSeleccionada, 1);
                    tablaBBDD.setValueAt(potencia, filaSeleccionada, 2);
                    tablaBBDD.setValueAt(autonomia, filaSeleccionada, 3);
                    tablaBBDD.setValueAt(precio, filaSeleccionada, 4);
                    System.out.println("Filas actualizadas: " + filasAfectadas);
                }
            } catch (Exception e) {
                System.out.println("ERROR: " + e.getMessage());
            }
        } 
    }//GEN-LAST:event_btUpdateMouseClicked

    private void tablaBBDDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaBBDDMouseClicked
        int filaSeleccionada = tablaBBDD.getSelectedRow();
        
        if (filaSeleccionada == -1){
            JOptionPane.showMessageDialog(null,"Error: Por favor, seleccione una fila.");
        } else {
            String modelo = tablaBBDD.getValueAt(filaSeleccionada, 1).toString();
            String potencia = tablaBBDD.getValueAt(filaSeleccionada, 2).toString();
            String autonomia = tablaBBDD.getValueAt(filaSeleccionada, 3).toString();
            String precio = tablaBBDD.getValueAt(filaSeleccionada, 4).toString();
            
            tfModelo.setText(modelo);
            tfPotencia.setText(potencia);
            tfAutonomia.setText(autonomia);
            tfPrecio.setText(precio);
        }
    }//GEN-LAST:event_tablaBBDDMouseClicked

    private void btDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btDeleteMouseClicked
        DefaultTableModel modeloDatos = (DefaultTableModel) tablaBBDD.getModel();

        if (tablaBBDD.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No hay registros disponibles.", "ERROR_MESSAGE", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                String url = "jdbc:mysql://localhost:3306/tesla";
                Connection con = DriverManager.getConnection(url, "root" , "");
                
                String sql = "DELETE FROM coches WHERE id = ?";
                
                int filaSeleccionada = tablaBBDD.getSelectedRow();
                int id = Integer.parseInt(tablaBBDD.getValueAt(filaSeleccionada, 0).toString());
                
                PreparedStatement statement = con.prepareStatement(sql);
                statement.setInt(1, id);
                
                int filasAfectadas = statement.executeUpdate();
                
                if (filasAfectadas > 0){
                    System.out.println("Filas eliminadas: " + filasAfectadas);
                    DefaultTableModel modelo = (DefaultTableModel) tablaBBDD.getModel();
                    for (int i = 0; i < modelo.getRowCount(); i++) {
                        if (Integer.parseInt(modelo.getValueAt(i, 0).toString()) == id){
                            modelo.removeRow(i);
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                System.out.println("ERROR: " + e.getMessage());
            }
        } 
    }//GEN-LAST:event_btDeleteMouseClicked

    private void exportarCSVButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportarCSVButtonMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtroCSV = new FileNameExtensionFilter("Archivos CSV" , "csv");
        fileChooser.setFileFilter(filtroCSV);
        
        int option = fileChooser.showSaveDialog(exportarCSVButton);
        
        if (option == JFileChooser.APPROVE_OPTION){
            File archivoCSV = fileChooser.getSelectedFile();
            try {BufferedWriter bw = new BufferedWriter(new FileWriter(archivoCSV.getAbsolutePath()));
                bw.write("Modelo, Potencia, Autonomia, Precio\n");
                                            bw.flush();

                try {Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/tesla", "root", "");
                
                    try {PreparedStatement statement = con.prepareStatement("SELECT modelo, potencia, autonomia, precio FROM coches");
                        ResultSet rs = statement.executeQuery();
                        while (rs.next()) {
                            String modelo = rs.getString("modelo");
                            String potencia = rs.getString("potencia");
                            String autonomia = rs.getString("autonomia");
                            String precio = rs.getString("precio");
                        
                            String linea = modelo + ", " + potencia + ", " + autonomia + ", " + precio; 
                            System.out.println(linea);
                            bw.write(linea+"\n");
                            bw.flush();
                        }
                        
                        JOptionPane.showMessageDialog(rootPane, "Acabe");
                        
                    } catch (Exception e) {
                        System.err.println("Error al exportar a CSV: " + e.getMessage());
                    }
        
                } catch (Exception e) {
                   System.err.println("Error al exportar a CSV: " + e.getMessage());
                }
            } catch (Exception e) {
                System.err.println("Error al exportar a CSV: " + e.getMessage());
            }
            
        }
        
    }//GEN-LAST:event_exportarCSVButtonMouseClicked

    private void importarCSVButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importarCSVButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_importarCSVButtonMouseClicked

    private void importarCSVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarCSVButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtroCSV = new FileNameExtensionFilter("Archivos CSV", "csv");
        fileChooser.setFileFilter(filtroCSV);

        int option = fileChooser.showOpenDialog(importarJSONButton);

        if (option == JFileChooser.APPROVE_OPTION) {
            File archivoCSV = fileChooser.getSelectedFile();
            
            try (BufferedReader br = new BufferedReader(new FileReader(archivoCSV))) {
                
                try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/tesla", "root", "")) {
                    String insertQuery = "INSERT INTO coches (modelo, potencia, autonomia, precio) VALUES (?, ?, ?, ?)";
                    String selectQuery = "SELECT modelo, potencia, autonomia, precio FROM coches WHERE modelo = ? AND potencia = ? AND autonomia = ? AND precio = ?";
                try (PreparedStatement insertStatement = con.prepareStatement(insertQuery);
                     PreparedStatement selectStatement = con.prepareStatement(selectQuery)) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        String[] data = line.split(",");
                        if (data.length == 4) {
                            String modelo = data[0].trim();
                            String potencia = data[1].trim();
                            String autonomia = data[2].trim();
                            String precio = data[3].trim();

                            // Verificar si los datos ya existen
                            selectStatement.setString(1, modelo);
                            selectStatement.setString(2, potencia);
                            selectStatement.setString(3, autonomia);
                            selectStatement.setString(4, precio);
                            ResultSet resultSet = selectStatement.executeQuery();

                            // Si no hay resultados, insertar los datos
                            if (!resultSet.next()) {
                                insertStatement.setString(1, modelo);
                                insertStatement.setString(2, potencia);
                                insertStatement.setString(3, autonomia);
                                insertStatement.setString(4, precio);
                                insertStatement.executeUpdate();
                            }
                        }
                    }

                    JOptionPane.showMessageDialog(rootPane, "Datos importados correctamente");
                } catch (Exception e) {
                    System.err.println("Error al importar datos desde CSV: " + e.getMessage());
                }
                } catch (Exception e) {
                    System.out.println("Error al importar datos desde CSV: " + e.getMessage());
                }
            } catch (Exception e) {
                System.out.println("Error al importar datos desde CSV: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_importarCSVButtonActionPerformed

    private void exportarJSONButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportarJSONButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_exportarJSONButtonMouseClicked

    private void exportarJSONButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarJSONButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exportarJSONButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(teslaBBDD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(teslaBBDD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(teslaBBDD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(teslaBBDD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new teslaBBDD().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClean;
    private javax.swing.JButton btCreate;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btRead;
    private javax.swing.JButton btUpdate;
    private javax.swing.JButton exportarCSVButton;
    private javax.swing.JButton exportarJSONButton;
    private javax.swing.JButton importarCSVButton;
    private javax.swing.JButton importarJSONButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jlAutonomia;
    private javax.swing.JLabel jlID;
    private javax.swing.JLabel jlModelo;
    private javax.swing.JLabel jlPotencia;
    private javax.swing.JLabel jlPrecio;
    private javax.swing.JTable tablaBBDD;
    private javax.swing.JTextField tfAutonomia;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfModelo;
    private javax.swing.JTextField tfPotencia;
    private javax.swing.JTextField tfPrecio;
    // End of variables declaration//GEN-END:variables
}
